{"mappings":"AAEA,IAAIA,MAAQ,IACRC,OAAS,IAGTC,IAAMC,GAAGC,OAAO,cACjBC,OAAO,OACLC,KAAK,QAASN,OACdM,KAAK,SAAUL,QAGdM,KAAO,CACX,CAAEC,KAAM,MAAOC,MAAO,GACtB,CAAED,KAAM,MAAOC,MAAO,GACtB,CAAED,KAAM,OAAQC,MAAO,GACvB,CAAED,KAAM,SAAUC,MAAO,GACzB,CAAED,KAAM,IAAKC,MAAO,GACpB,CAAED,KAAM,IAAKC,MAAO,GACpB,CAAED,KAAM,IAAKC,MAAO,GACpB,CAAED,KAAM,IAAKC,MAAO,GACpB,CAAED,KAAM,IAAKC,MAAO,GACpB,CAAED,KAAM,IAAKC,MAAO,IAIhBC,EAAIP,GAAGQ,eACVC,OAAO,CAAC,EAAG,EAAG,EAAG,EAAG,IACpBC,MAAM,CAAC,GAAI,GAAI,GAAI,GAAI,KAGpBC,MAAQX,GAAGQ,eAChBC,OAAO,CAAC,EAAG,EAAG,EAAG,EAAG,IACpBC,MAAM,CAAE,UAAW,UAAW,UAAW,UAAW,kBAG5CE,aAAaC,EAAIC,GACxB,OAAOC,KAAKC,UAAYF,EAAMD,GAAOA,EAEvC,IAAMI,MAAQ,GAGVC,KAAOnB,IAAIG,OAAO,KACnBiB,UAAU,UACVf,KAAKA,MACLgB,KAAK,UACHjB,KAAK,IAAKc,OACVd,KAAK,KAAMN,MAAQ,GACnBM,KAAK,KAAML,OAAS,GACpBuB,MAAM,QAAQ,SAAAC,GAAK,OAAAX,MAAMW,EAAEhB,UAC3BH,KAAK,eAAgB,KACrBoB,KAAKvB,GAAGwB,OACNC,GAAG,QAASC,aACZD,GAAG,OAAQE,SACXF,GAAG,MAAOG,YAGbC,WAAa7B,GAAG8B,kBACjBC,MAAM,IAAK/B,GAAGgC,SAASC,SAAS,IAAK1B,GAAE,SAAAe,GAAK,OAAAf,EAAEe,EAAEhB,WAChDyB,MAAM,IAAK/B,GAAGkC,SAASD,SAAS,IAAKE,EAAGrC,OAAS,IACjDiC,MAAM,SAAU/B,GAAGoC,cAAc7B,EAAEV,MAAQ,GAAGsC,EAAErC,OAAS,IACzDiC,MAAM,SAAU/B,GAAGqC,gBAAgBJ,SAAS,KAC5CF,MAAM,UAAW/B,GAAGsC,eAAeL,SAAS,GAAGM,OAAOtB,OAAOuB,WAAW,aAclEd,YAAYe,EAAOnB,GACrBmB,EAAMC,QAAQb,WAAWc,YAAY,KAAKC,UAC9CtB,EAAEuB,GAAKvB,EAAEf,EACTe,EAAEwB,GAAKxB,EAAEa,WAEFR,QAAQc,EAAOnB,GACtBA,EAAEuB,GAAKJ,EAAMlC,EACbe,EAAEwB,GAAKL,EAAMN,WAENP,UAAUa,EAAOnB,GACpBmB,EAAMC,QAAQb,WAAWc,YAAY,KACzCrB,EAAEuB,GAAK,KACPvB,EAAEwB,GAAK,KAtBVjB,WACKkB,MAAM3C,MACNqB,GAAG,QAAQ,SAAAuB,GACV9B,KACKf,KAAK,MAAM,SAAAmB,GAAK,OAAAA,EAAEf,KAClBJ,KAAK,MAAM,SAAAmB,GAAK,OAAAA,EAAEa","sources":["src/scripts/animintro.js"],"sourcesContent":["// scale\n// set the dimensions and margins of the graph\nvar width = 450\nvar height = 450\n\n// append the svg object to the body of the page\nvar svg = d3.select(\"#animcover\")\n  .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n\n// create dummy data -> just one element per circle\nconst data = [\n  { name: 'Uno', group: 1 },\n  { name: 'Dos', group: 2 },\n  { name: 'Tres', group: 3 },\n  { name: 'Cuatro', group: 4 },\n  { name: 'F', group: 5 },\n  { name: 'E', group: 5 },\n  { name: 'G', group: 5 },\n  { name: 'H', group: 5 },\n  { name: 'I', group: 5 },\n  { name: 'J', group: 5 }\n]\n\n// A scale that gives a X target position for each group\nconst x = d3.scaleOrdinal()\n  .domain([1, 2, 3, 4, 5])\n  .range([50, 50, 50, 50, 50])\n\n// A color scale\nconst color = d3.scaleOrdinal()\n.domain([1, 2, 3, 4, 5])\n.range([ \"#FF6874\", \"#2BC4A9\", \"#9F9FFF\", \"#FFFF9F\", \"#000\"])\n\n// Randomize size\nfunction randomNumber(min,max) {\n  return Math.random() * (max - min) + min;\n}\nconst radio = 48;\n\n// Initialize the circle: all located at the center of the svg area\nlet node = svg.append(\"g\")\n  .selectAll(\"circle\")\n  .data(data)\n  .join(\"circle\")\n    .attr(\"r\", radio)\n    .attr(\"cx\", width / 2)\n    .attr(\"cy\", height / 2)\n    .style(\"fill\", d => color(d.group))\n    .attr(\"stroke-width\", \"4\")\n    .call(d3.drag() // call specific function when circle is dragged\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended));\n\n// Features of the forces applied to the nodes:\nvar simulation = d3.forceSimulation()\n  .force(\"x\", d3.forceX().strength(0.3).x(d => x(d.group)))\n  .force(\"y\", d3.forceY().strength(0.1).y( height / 2 ))\n  .force(\"center\", d3.forceCenter().x(width / 2).y(height / 2)) // Attraction to the center of the svg area\n  .force(\"charge\", d3.forceManyBody().strength(0.1)) // Nodes are attracted one each other of value is > 0\n  .force(\"collide\", d3.forceCollide().strength(8).radius(radio).iterations(3)) // Force that avoids circle overlapping\n\n// Apply these forces to the nodes and update their positions.\n// Once the force algorithm is happy with positions ('alpha' value is low enough), simulations will stop.\nsimulation\n    .nodes(data)\n    .on(\"tick\", d => {\n      node\n          .attr(\"cx\", d => d.x)\n          .attr(\"cy\", d => d.y)\n    });\n\n\n// What happens when a circle is dragged?\nfunction dragstarted(event, d) {\n  if (!event.active) simulation.alphaTarget(.03).restart();\n   d.fx = d.x;\n   d.fy = d.y;\n }\n function dragged(event, d) {\n   d.fx = event.x;\n   d.fy = event.y;\n }\n function dragended(event, d) {\n  if (!event.active) simulation.alphaTarget(.03);\n   d.fx = null;\n   d.fy = null;\n }\n"],"names":["width","height","svg","d3","select","append","attr","data","name","group","x","scaleOrdinal","domain","range","color","randomNumber","min","max","Math","random","radio","node","selectAll","join","style","d","call","drag","on","dragstarted","dragged","dragended","simulation","forceSimulation","force","forceX","strength","forceY","y","forceCenter","forceManyBody","forceCollide","radius","iterations","event","active","alphaTarget","restart","fx","fy","nodes","d1"],"version":3,"file":"index.c52148f0.js.map"}